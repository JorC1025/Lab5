
PreLab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000024a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000841  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000716  00000000  00000000  00000b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000355  00000000  00000000  00001273  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  000015c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ac  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000119  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001b5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 30       	cpi	r26, 0x01	; 1
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  9e:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_21>:
	
}



ISR (ADC_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	
    valor_adc = ADCH;  
  c8:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

    // Mapear 0-255 a 1000-2000 us
    uint16_t pulse_us =  ((uint16_t)valor_adc * 4000) / 255 +1200;
  d0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d4:	80 ea       	ldi	r24, 0xA0	; 160
  d6:	9f e0       	ldi	r25, 0x0F	; 15
  d8:	48 9f       	mul	r20, r24
  da:	90 01       	movw	r18, r0
  dc:	49 9f       	mul	r20, r25
  de:	30 0d       	add	r19, r0
  e0:	11 24       	eor	r1, r1
  e2:	a1 e8       	ldi	r26, 0x81	; 129
  e4:	b0 e8       	ldi	r27, 0x80	; 128
  e6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <__umulhisi3>
  ea:	88 0f       	add	r24, r24
  ec:	89 2f       	mov	r24, r25
  ee:	88 1f       	adc	r24, r24
  f0:	99 0b       	sbc	r25, r25
  f2:	91 95       	neg	r25
    pwm1_set_pulse(pulse_us);
  f4:	80 55       	subi	r24, 0x50	; 80
  f6:	9b 4f       	sbci	r25, 0xFB	; 251
  f8:	0e 94 c9 00 	call	0x192	; 0x192 <pwm1_set_pulse>

	
	ADCSRA |= (1 << ADSC);
  fc:	ea e7       	ldi	r30, 0x7A	; 122
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 64       	ori	r24, 0x40	; 64
 104:	80 83       	st	Z, r24
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <initADC>:

void initADC(){
	
	ADMUX = 0;
 128:	ec e7       	ldi	r30, 0x7C	; 124
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0) | (1 << ADLAR) | (1<< MUX2)| (1<<MUX1);
 12e:	80 81       	ld	r24, Z
 130:	86 66       	ori	r24, 0x66	; 102
 132:	80 83       	st	Z, r24
	
	ADCSRA = 0;
 134:	ea e7       	ldi	r30, 0x7A	; 122
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADPS1) |(1<<ADPS0) | (1<< ADEN) | (1<<ADIE);
 13a:	80 81       	ld	r24, Z
 13c:	8b 68       	ori	r24, 0x8B	; 139
 13e:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADSC);
 140:	80 81       	ld	r24, Z
 142:	80 64       	ori	r24, 0x40	; 64
 144:	80 83       	st	Z, r24
 146:	08 95       	ret

00000148 <setup>:
    }
}

void setup(){
	
	cli();
 148:	f8 94       	cli
	CLKPR = (1 << CLKPCE);
 14a:	80 e8       	ldi	r24, 0x80	; 128
 14c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
	initADC();
 150:	0e 94 94 00 	call	0x128	; 0x128 <initADC>
	sei();
 154:	78 94       	sei
 156:	08 95       	ret

00000158 <main>:



int main(void)
{
	setup();
 158:	0e 94 a4 00 	call	0x148	; 0x148 <setup>
	pwm1_init();
 15c:	0e 94 b3 00 	call	0x166	; 0x166 <pwm1_init>
	initADC();
 160:	0e 94 94 00 	call	0x128	; 0x128 <initADC>
 164:	ff cf       	rjmp	.-2      	; 0x164 <main+0xc>

00000166 <pwm1_init>:
#include "PWM0.h"

void pwm1_init(void){

// Configurar PB1 (OC1A) como salida
DDRB |= (1 << PORTB1);
 166:	84 b1       	in	r24, 0x04	; 4
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	84 b9       	out	0x04, r24	; 4

// Modo Fast PWM con TOP = ICR1
TCCR1A = (1 << COM1A1) | (1 << WGM11);  // Se limpia el 0CR1A por comparación
 16c:	82 e8       	ldi	r24, 0x82	; 130
 16e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Prescaler 8
 172:	8a e1       	ldi	r24, 0x1A	; 26
 174:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

ICR1 = 40000;  // TOP para 20ms (50Hz) con F_CPU = 16MHz y prescaler = 8
 178:	80 e4       	ldi	r24, 0x40	; 64
 17a:	9c e9       	ldi	r25, 0x9C	; 156
 17c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 180:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

OCR1A = 1000;
 184:	88 ee       	ldi	r24, 0xE8	; 232
 186:	93 e0       	ldi	r25, 0x03	; 3
 188:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 18c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 190:	08 95       	ret

00000192 <pwm1_set_pulse>:
}

void pwm1_set_pulse(uint16_t pulse_us) {
	// pulse_us en microsegundos (por ejemplo 1000 a 2000)
	// Convertir a ticks del timer (16 MHz / 8 = 2 MHz ? 1 tick = 0.5 us)
	if (pulse_us < 1000) pulse_us = 1000;
 192:	88 3e       	cpi	r24, 0xE8	; 232
 194:	23 e0       	ldi	r18, 0x03	; 3
 196:	92 07       	cpc	r25, r18
 198:	10 f4       	brcc	.+4      	; 0x19e <pwm1_set_pulse+0xc>
 19a:	88 ee       	ldi	r24, 0xE8	; 232
 19c:	93 e0       	ldi	r25, 0x03	; 3
	if (pulse_us > 5000) pulse_us = 5000;
 19e:	89 38       	cpi	r24, 0x89	; 137
 1a0:	23 e1       	ldi	r18, 0x13	; 19
 1a2:	92 07       	cpc	r25, r18
 1a4:	10 f0       	brcs	.+4      	; 0x1aa <pwm1_set_pulse+0x18>
 1a6:	88 e8       	ldi	r24, 0x88	; 136
 1a8:	93 e1       	ldi	r25, 0x13	; 19
	
	OCR1A = (pulse_us);
 1aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1b2:	08 95       	ret

000001b4 <__umulhisi3>:
 1b4:	a2 9f       	mul	r26, r18
 1b6:	b0 01       	movw	r22, r0
 1b8:	b3 9f       	mul	r27, r19
 1ba:	c0 01       	movw	r24, r0
 1bc:	a3 9f       	mul	r26, r19
 1be:	70 0d       	add	r23, r0
 1c0:	81 1d       	adc	r24, r1
 1c2:	11 24       	eor	r1, r1
 1c4:	91 1d       	adc	r25, r1
 1c6:	b2 9f       	mul	r27, r18
 1c8:	70 0d       	add	r23, r0
 1ca:	81 1d       	adc	r24, r1
 1cc:	11 24       	eor	r1, r1
 1ce:	91 1d       	adc	r25, r1
 1d0:	08 95       	ret

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
